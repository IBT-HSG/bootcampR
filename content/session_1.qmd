## Why we like R {.smaller}

**Scripts vs. WYSIWYG (Excel or SPSS)**

Analyses conducted in R are transparent, easily shareable, and reproducible. This helps not only others to run and understand your code but also your future selves.

**Open Source**

R is 100% free of charge and as a result, has a huge support community. it means that a huge community of R programmers will constantly develop an distribute new R functionality. It also means that you find a lot of help online as others ran into the same problems as you do.

**Versatility**

Yes, R is not Python. You can still use it to do a lot of stuff. If you can imagine an analytical task, you can almost certainly implement (and automate) it in R.

**RStudio**

RStudio helps you write R code. You can easily and seamlessly organize and combine R code, analyses, plots, and written text into elegant documents all in one place.

## Examples & Use Cases

-   [Dashboards](https://beta.rstudioconnect.com/jjallaire/htmlwidgets-highcharter/htmlwidgets-highcharter.html#sales-by-category)
-   [Master Thesis](https://howquez.github.io/Are-there-hidden-Benefits-of-Monitoring/Predictions.html#the-self-interested-agents-expected-utility) [& Research Paper](https://github.com/Howquez/coopUncertainty/blob/main/analysis/quarto/paper.pdf)
-   [Fraud Detection](http://rstudio-pubs-static.s3.amazonaws.com/334864_28050f7860dd4927a596872f0cd52401.html)
-   [These Slides](https://github.com/Howquez/r-basics/blob/main/session_1.qmd)

## R & RStudio

RStudio is an integrated development environment (IDE) for R. It helps the user effectively use R by making things easier with features such as:

-   Syntax highlighting,
-   Code completion,
-   Smart indentation,
-   Workspaces (more on that later), etc.

## RStudio GUI {.smaller}

Opening RStudio, you will see four window panes:

-   bottom left: The `Console` executes code. You can use it to test code that is not saved.
-   upper left: The `Source` opens your scripts, markdown documents or notebooks. It is the one you'll use the most as it allows you to write and save both comments and code. You have to actively run the code, though.
-   upper right: The `Environment Pane` displays the objects (e.g. data, variables, custom functions) you can access in your current memory.
-   bottom right: This pane shows you many different, yet important, tabs. You can browse your directory, view plots, get help and see installed packages.

::: footer
See this [cheat sheet](https://github.com/Howquez/r-basics/blob/main/material/rstudio-ide.pdf)
:::

##  {background-image="https://github.com/IBT-HSG/bootcampR/blob/main/img/GUI.png?raw"}

## Use comments {.scrollable}

-   You can make comments using hashtags `#`.
-   Text behind `#` will not be evaluated.
-   You can use this to annotate your code or
-   to *comment out* code blocks you don't need currently.

```{r}
#| echo: true
#| eval: true

# calculate a sum that equals 4
2 + 2 # + 99
```

::: callout-tip
## Sections

You can also use `# some title -----` to create foldable sections in your scripts
:::

## Use comments

```{r}
#| eval: false
#| echo: true
#
# Dear programmer:
# When I wrote this code, only god and I knew how it worked.
# Now, only god knows it!
#
# Therefore, if you are trying to optimize this routine
# and it fails (most surely), please increase this counter
# as a warning for the next person
#
# total_hours_wasted_here = 254
#
```

::: footer
source: [reddit](https://www.reddit.com/r/ProgrammerHumor/comments/8pdebc/only_god_and_i_knew/)
:::

# Vamos!

## Operators

::: {layout-ncol="2"}
In the most simple form, R is an advanced calculator. Operators are symbols you know from any other program (Excel, etc.), such as `+` or `-`.

| Operation | Description      |
|-----------|------------------|
| x + y     | Addition         |
| x - y     | Subtraction      |
| x \* y    | Multiplication   |
| x / y     | Division         |
| x \^ y    | Exponentiation   |
| x %/% y   | Integer Division |
| x %% y    | Remainder        |
:::

## Algebra

```{r}
#| echo: true
#| eval: false

2+2
2 * 4
2^4
2 + (2 * 3) ^ 2
(1 + 3) / 2 + 45
13 %/% 3
13 %% 5
```

## Assign Values to Objects {.scrollable}

-   R can keep several objects in memory at the same time
-   To distinguish them, objects have names.
-   Objects are assigned with `<-` or `=` (we recommend the former).

::: callout-important
## Don't

Pretending `13 %% 5` was some important intermediate result that you'll need later on, you shouldn't run the same operation over and over again.

```{r}
#| echo: true
#| eval: false

13 %% 5
# [1] 3
(13 %% 5) * 2
# [1] 6
```
:::

::: callout-tip
## Do

Instead, assign an object (`result`) and refer to that one.

```{r}
#| echo: true
#| eval: false

result <- 13 %% 5
result * 2
# [1] 6
```
:::

## Assign Values to Objects

::: callout-note
## Why `<-`

There is a general preference among the R community for using \<- for assignment. This has at least two reasons:

1.  Compatibility with old versions.
2.  Ambiguity of `=` because it is used in other contexts (functions) as well.
:::

::: callout-note
## Shortcuts

-   Mac: press `option` & `-`
-   Windows: press `Alt` & `-`
:::

::: footer
[Source](https://stackoverflow.com/a/1742550)
:::

## Assign Values to Objects

To inspect the objects you have just created you can *call* them.

```{r}
#| echo: true
#| eval: false

result
# [1] 3
```

Alternatively, you can take a look into your `Environment`. Do you remember where to find it?

## Naming {.scrollable}

::: callout-tip
## Conventions

-   Variable and function names should be lowercase.
-   If your code requires constants, use uppercase names.
-   Use an underscore `_` to separate words within a name.
-   Strive for names that are concise and meaningful (this is not easy!).
:::

```{r}
#| echo: true
#| eval: false

# Good
day_one
day_1
VAT

# Bad
first_day_of_the_month
dayone
value_added_tax_constant
```

::: callout-tip
## Case Sensitivity

Uppercase and lowercase letters are treated as distinct.
:::

```{r}
#| echo: true
#| eval: false

A <- 12
a <- 42
a == A

# [1] FALSE
```

::: callout-warning
Importantly, be careful to not reassign an object unintentionally.
:::

```{r}
#| echo: true
#| eval: false

a <- log(42)
a
# [1] 3.73767

# imagine to do some stuff in between...
# ...forgot about your object...
# ...and that you want to create another object called "a".

a <- 40 + 2
a
# [1] 42
```

::: callout-warning
Where possible, avoid using names

-   of special characters,
-   existing functions and
-   existing variables.

Doing so will cause confusion for the readers of your code.
:::

```{r}
#| echo: true
#| eval: false

# Bad
T <- FALSE
c <- 10
mean <- function(x) sum(x)
```

::: callout-note
Also, try to avoid special symbols such as `+`, for example. If you really need them, you can escape them using the back tick \`
:::

## Data Types

There are many different data types. Today, we will focus on the most basic ones:

| Data Type | Example       |
|-----------|---------------|
| Numeric   | `42`          |
| Character | `"forty two"` |
| Logical   | `TRUE`        |

::: callout-tip
Use `class()` to identify data types. `class(42)` will return `numeric`, for instance.
:::

## Changing Data Types

You will run into situations where R does not interpret data the way you want it. For instance, if R interprets the value `3` as `"3"`, that is, as a `character` while it should be a `numeric`.

Luckily, R offers functions for these situations:

```{r}
#| echo: true

as.character(3)
as.numeric("3")
as.logical(0)
as.logical(1)

# does not work: as.numeric("three")
```

```{=html}
<!--
You can create obejcts such as vectors^[We'll cover this today.], data.frames^[On tomorrow's menu.], lists, etc. to store these data types in multiple dimensions.
-->
```
## Vectors

We can **c**ombine objects `c()` command to create a vector. The documentation says:

> The default method combines its arguments to form a vector. All arguments are coerced to a common type which is the type of the returned value \[...\].

```{r}
#| eval: false
#| echo: true
a     <- c(1, 2, 3)
cntry <- c("CH", "FR", "NL", "DK")
test  <- c(1, 3, 5, "seven")
```

## Break

please answer the survey if you haven't done so already

![](img/QR_survey.png)

## 

```{r}
#| echo: true
#| eval: false

x <-  3
x < - 3
```


## Boolean Algebra {.smaller}

| Operation | Description           | Output                                                       |
|------------------|------------------|-------------------------------------|
| x \< y    | Less than             | TRUE if x is smaller than y. FALSE otherwhise                |
| x \<= y   | Less or equal than    | TRUE if x is smaller or equal than y. FALSE otherwhise       |
| x \> y    | Greater than          | TRUE if x is greater than y. FALSE otherwhise                |
| x \>= y   | Greater or equal than | TRUE if x is greater or equal than y. FALSE otherwhise       |
| x == y    | Exactly equal to      | TRUE if and only if x is equal to y. FALSE otherwhise        |
| x != y    | Not equal to          | TRUE if and only if x is not equal to y. FALSE otherwhise    |
|           |                       |                                                              |
| !x        | Negation              | TRUE if x is equal to FALSE or 0. FALSE otherwhise           |
| x \| y    | OR                    | TRUE if x or y or both are TRUE . FALSE otherwhise           |
| x & y     | AND                   | TRUE if and only if x and y are both TRUE . FALSE otherwhise |

## Boolean Algebra

::: callout-tip
## Description

A Boolean expression is a logical statement that is either `TRUE` or `FALSE`.
:::

```{r}
#| echo: true
#| eval: false

3 < 4
3 >= 4
3 == 4
3 != 4

!TRUE
TRUE | FALSE
TRUE & FALSE
```

::: callout-note
You can also abbreviate `TRUE` and `FALSE` with `T` and `F`.
:::

## Selecting

Let's combine what we learned about vectors and boolean algebra.

::: callout-note
## Exercise

Create a vector called `countries` that contains "CH", "FR", "NL" & "DK".
:::

## Selecting

::: callout-tip
Show the vector's first entry using `countries[1]`.
:::

::: callout-tip
Show whether the vector contains `"EN"` with `"EN" %in% countries`.
:::

::: callout-tip
Show where the vector contains `"DK"` with `match("DK", countries)`.
:::



## Functions

So far, you have seen at least two built-in functions: `class()` & `c()`. Another useful function is `mean()`.

You can recognize a function either via `class()`[^session_1-1] or by the parentheses.

[^session_1-1]: `class(class)` returns `"function"`, for instance.

To call a function, you have to provide some argument(s). The `mean()` function needs some sort of vector, for instance.

## How to get Help? {.smaller}

Assume you want to learn how to use the `mean()` function.

-   `?mean` or `help(mean)`
-   Use [stackoverflow](https://stackoverflow.com/questions/16801340/mean-in-r-by-using-mean)

## Packages

-   Packages are the fundamental units of reproducible R code. They include reusable R functions, the documentation that describes how to use them, and sample data.

-   The comprehensive R Archive Network currently features [18.694 packages](https://cran.r-project.org/index.html).

-   The majority of packages is quite niche-specific.

-   To get started, we'll show you how to install [Tidyverse](https://www.tidyverse.org/), an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.

## Using packages

![An R package is like a lightbulb. First you need to order it with install.packages(). Then, every time you want to use it, you need to turn it on with library()](https://bookdown.org/ndphillips/YaRrr/images/packagebulb.png)

::: footer
[Source](https://bookdown.org/ndphillips/YaRrr/packages.html)
:::


##  {background-image="https://hbctraining.github.io/Intro-to-R/img/tidyverse_website.png" background-size="contain" background-repeat="no-repeat"}

```{r}
#| echo: true
#| eval: false

# run this only once
install.packages("package_name")

# run this at the beginning of each session (if needed)
library(package_name)
```

::: footer
[Source](https://hbctraining.github.io/Intro-to-R/lessons/08_intro_tidyverse.html)
:::

## Exercise

::: callout-tip
## Your turn

1.  Install `tidyverse`, which contains the lubridate package with a function called `year()`
2.  get the documentation for the following function: `Sys.Date()`
3.  execute `Sys.Date() %>% year()`
4.  Load `tidyverse`
5.  execute `Sys.Date() %>% year()`
:::

## Packages

Remember that the bottom right pannel has a `Packages` tab? Let's inspect it.

## The %\>% Operator {.scrollable}

Let's apply some functions. `Can you guess the outcome?`

```{r}
#| eval: false
#| echo: true

paste0(round(sqrt(82), digit = 2), " is your result!")
```

We can do the same using `%>%`:

```{r}
#| eval: false
#| echo: true

sqrt(82) %>% round(digit = 2) %>% paste0(" is your result!")
```

::: {.callout-note collapse="true"}
## Proof

To prove that there is no difference between the two outcomes, we compare them:

```{r}
#| eval: true
#| echo: true

paste0(round(sqrt(82), digit = 2), " is your result!") == sqrt(82) %>% round(digit = 2) %>% paste0(" is your result!")
```
:::

::: callout-tip
## Your turn

-   create a vector called `vec` containing `1`, `2`, `3`, `99`
-   calculate the `mean()` using both methods
-   round the results (one digit) and assign it to objects called `res1` & `res1`
-   show that both are equal
:::

```{r}
#| echo: true
#| eval: true

vec <- c(1, 2, 3, 99)
res1 <- mean(vec) %>% round(digits = 1)
res2 <- round(mean(vec), digits = 1)
res1 == res2
```

## Exercise

::: callout-tip
## Generate three objects

-   `my_pi` should contain the number pi (try out the command `pi`)
-   a vector, called `a`, should contain the numbers `1` to `3`
-   `b` should be the multiplication of `1*pi`, `2*pi` `3*pi`
:::

## Environment

-   We can see all objects currently in our workspace by typing `ls()`.
-   You can remove objects using `rm()`

```{r}
#| eval: false
#| echo: true

ls()
rm(a)

# What do you think is going to happen here?
rm(list = ls())
```

------------------------------------------------------------------------

You should actually apply this.

::: callout-tip
## Delete unused elements

This makes your environment easier to read and saves some memory.
:::

::: callout-tip
## Start with a fresh session

This forces you to

1.  document all used objects in your script and
2.  load all packages you are using.

It, thus, makes your code more reproducible and less likely to break.
:::

------------------------------------------------------------------------

![Don't!](https://github.com/IBT-HSG/bootcampR/blob/main/img/Workspace.png?raw=true)

## Exercises {.smaller .scrollable}

1. create a new variable called `my_num` that contains 6 numbers
2. multiply `my_num` by 4
3. create a second variable called `my_char` that contains 5 character strings
4. combine the two variables `my_num` and `my_char` into a variable called `both` (hint: you can use the `c()` function)
5. what is the length of `both` (hint: try the `length()` function)
6. what class is `both`?
7. divide `both` by 3, what happens?
8. create a vector with elements 1 2 3 4 5 6 and call it `x`
9. create another vector with elements 10 20 30 40 50 and call it `y`
10. what happens if you try to add `x` and `y` together? why?
11. append the value 60 onto the vector `y` (hint: you can use the `c()` function)
12. add `x` and `y` together
13. multiply `x` and `y` together. pay attention to how R performs operations on vectors of the same length.

## Bonus: Scripts, Markdown & Project {.smaller}

-   Scripts are a great way to document *how* you analyzed your data.
-   Like a recipe, scripts make it easy (for you and others) to reproduce your process *exactly*.
-   You can also use RMarkdown, which allows you to blend code chunks with text.[^session_1-2]
-   To make your code even more organized and reproducible, use [R Projects](https://www.r-bloggers.com/2020/01/rstudio-projects-and-working-directories-a-beginners-guide/).

[^session_1-2]: Which is great for these slides, reports and quantitative master theses, for instance.

## Ressources

`swirl` is a great start as it teaches you R interactively, at your own pace, and right in the R console! Run the following code to get started.

```{r eval = FALSE, echo = TRUE}
install.packages("swirl") # install this package once
library(swirl)
siwrl()
```

## Ressources

Resources we found helpful creating the slides:

-   [YaRrrr](https://bookdown.org/ndphillips/YaRrr/)
-   [Introduction to R by John Mushcelli and Andrew Jaffe](https://users.phhp.ufl.edu/rlp176/Courses/PHC6089/R_notes/index.html)
-   [R for Data Science](http://r4ds.had.co.nz/)
