```{r, include = FALSE}
library(ggplot2)
library(patchwork)
data("diamonds")
diamonds <- diamonds[sample(nrow(diamonds), 1000), ]
```

## Recap Session 2

-   Read in and export data
-   Explore your data
-   Manipulate data
-   Analyze data

## Any experienced difficulties? Anything we should repeat?

## Recap: import and export data

Reading in

```{r}
#| echo: true
#| eval: false
data <- read.table("data/raw/student_experiment.csv", sep = ";", header = T) # you need to adapt this to your working directory file path
```

Saving

```{r}
#| echo: true
#| eval: false
write.table(data, "data/processed/student_experiment_processed.csv") # writes the final dataframe as a .csv file into your specified directory
```

## Recap: Exploring data

-   `head(data)` shows the first few rows of your data
-   `names(data)` shows the column or variable names of your data
-   `view(data)` shows the entire data in a new window

## Overview Session 3

1.  Visualization
2.  Organize your project
3.  Analysis Template: putting everything together
4.  Questions

## Why visualization?

Data visualization is the practice of representing data in a graphical form (e.g. plots). This is a powerful way to visualize information in a way that is understandable to the majority of the audience (and impress your professors when presenting the empirical project). For this reason it is crucial to select the type of visualization that best fits our data and our goal!

## Ggplot - grammar of graphics

[Ggplot](https://ggplot2.tidyverse.org/reference/) is a powerful package for creating visualizations. Its strength relies on the underlying [*Grammar of Graphics*](https://doi.org/10.1007/0-387-28695-0), a set of rules of combining independent elements into a graphical representations.

## Elements of grammar of graphics {.smaller}

-   Data: variables mapped to aesthetic features of the graph.
-   Geoms: objects/shapes on the graph.
-   Stats: statistical transformations that summarize data,(e.g mean, confidence intervals).
-   Scales: mappings of aesthetic values to data values. Legends and axes visualize scales.
-   Coordinate systems: the plane on which data are mapped on the graphic.
-   Faceting: splitting the data into subsets to create multiple variations of the same graph (paneling).

## Ggplot bulding blocks {.smaller}

-   `ggplot()` initializes the coordinate system of our visual representation. It takes as input the dataset of interest.
-   `geom_*()` specifies the type of visualization. It needs a mapping argument which maps the variables from the dataset to the objects on the plot.
-   `aes()` is assigned to the mapping argument. It takes as argument the values corresponding to the x and y axis, as well as other plot-specific characteristics (e.g., color, size, fill,...)
-   Additional functions can be added to to specify labeling and thematic characteristics (`ggtitle()`,`xlab()`,`ylab()`,`theme()`).

Remember: It is always possible to get help regarding these function by running `?functionName`

## Type of data visualization I/III {.smaller}

#### Univariate visualizations

Univariate graphical representation visualize the distribution of data from a single continuous or discrete variables.

-   Bar plot: representation of categorical categorical data.
-   Histograms, distribution plot and box plot: representation of the distribution of numerical data.

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| fig-cap: bar plot (left) histogram with kernel distribution (right)
p1 = ggplot(diamonds) + geom_bar(mapping=aes(x=cut))
p2 = ggplot(diamonds, aes(x = depth)) + 
  geom_histogram(aes(x=depth, y = ..density..),
                 colour = 1, fill = "white") + geom_density()
p1+p2
```
:::

::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
ggplot(diamonds) + geom_bar(mapping=aes(x=cut))
ggplot(diamonds, aes(x = depth)) + 
        geom_histogram(aes(x=depth, y = ..density..),
                 colour = 1, fill = "white") +
        geom_density()

```
:::
:::

## Type of data visualization II/III {.smaller}

#### Bivariate visualizations

Bivariate visual analysis shows relationship between two variables. It is important to select the correct visualization type according to the variables analysed:

-   Continuous v Continuous
-   Discrete v Discrete
-   Discrete v Continuous

## Type of data visualization II/III

#### Bivariate visualizations (Continuous v Continuous)

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-cap: scatter plot

ggplot(diamonds) +
  geom_point(aes(
           x = carat, 
           y = price))




```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| fig-cap: scatter plot and line of best fit

ggplot(diamonds,aes(x = carat, 
           y = price)) +
  geom_point() +
  geom_smooth(method = "lm") 
```
:::
:::

## Type of data visualization II/III

#### Bivariate visualizations (Discrete v Discrete)

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-cap: stacked bar plot 

ggplot(diamonds) + 
  geom_bar(aes(x = color, 
           fill = cut), position = "stack")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| fig-cap: grouped bar plot

ggplot(diamonds) + 
  geom_bar(aes(x = color, 
           fill = cut), position = "dodge")
```
:::
:::

## Type of data visualization II/III

#### Bivariate visualizations (Discrete v Continous)

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-cap: Box plots

ggplot(diamonds, 
       aes(x = color, 
           y = price)) +
  geom_boxplot() +
  labs(title = "Salary distribution by rank")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| fig-cap: Grouped kernel distribution plots 

ggplot(diamonds, 
       aes(x = price, 
           fill = color)) +
  geom_density(alpha = 0.4) +
  labs(title = "Salary distribution by rank")
```
:::
:::

## Type of data visualization III/III {.smaller}

#### Multivariate visualizations

Multivariate presentation show the relationship of 3 or more variables. There are two main approaches *grouping* and *faceting*.

-   Grouping represents the data on a single plot when the x and y axis represent two variables and the third is displayed through visual elements such as colors, dot shape, size, etc.
-   Faceting simply include different plot in one single visualization.

## Type of data visualization III/III

#### Multivariate visualizations (Grouping)

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| fig-cap: multivarite scatter plot 

ggplot(diamonds) +
  geom_point(aes(x = carat, 
           y = price, color=color, shape=cut))




```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| fig-cap: multivarite scatter plot 

ggplot(diamonds) +
  geom_point(aes(x = carat, 
           y = price, color=color, size=depth))
```
:::
:::

## Type of data visualization III/III

#### Multivariate visualizations (Faceting)

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
#| fig-cap: price ($1000) histogram by color and cut

# plot salary histograms by rank and sex
ggplot(diamonds, aes(x = price/1000)) +
  geom_histogram(color = "white",
                 fill = "cornflowerblue") +
  facet_grid(cut ~ color)

```
:::

::: {.column width="50%"}
```{r}
#| echo: True
#| fig-cap: price ($1000) histogram by color and cut
#| eval: false

# plot salary histograms by rank and sex
ggplot(diamonds, aes(x = price/1000)) +
  geom_histogram(color = "white",
                 fill = "cornflowerblue") +
  facet_grid(cut ~ color)

```
:::
:::



## Resources

-   Easy to read [book chapter](http://qpolr.com/dataviz.html)
-   [A full book](https://ggplot2-book.org/index.html)
-   [And another one](https://rkabacoff.github.io/datavis/)
-   [List of geoms](https://ggplot2.tidyverse.org/reference/#geoms)
-   As always: *Stackoverflow*

## Organize your project {.smaller auto-animate="true"}

1. Create a new folder called `BootcampR`
2. Create a R script file
3. Set your working directory to `your_path_to/BootcampR`
4. Create a folder called `data`
5. Create two subdirectories: `data/raw` and `data/preprocessed`
6. Move the file `mtcars.csv` into `data/raw`

## Organize your project {.smaller auto-animate="true"} 

1. Create a new folder called `BootcampR`
2. Create a R script file
3. Set your working directory to `your_path_to/BootcampR`

```{r}
#| echo: true
#| eval: false
setwd('`your_path_to/BootcampR`')
```

4. Create a folder called `data`

```{r}
#| echo: true
#| eval: false
dir.create('data')
```

5. Create two subdirectories: `data/raw` and `data/preprocessed`

```{r}
#| echo: true
#| eval: false
dir.create('data/raw')
dir.create('data/preprocessed')
```

6. Move the file `mtcars.csv` into `data/raw`

## Break

Download the `mtcars.csv` file from canvas :) 

## Analysis Template: putting everything together
